#!/usr/bin/env node

let argv = {_: process.argv.slice(2)}//require('minimist')(process.argv.slice(2))

bitdb = require('./bitdb.js')
download = require('./download.js')

os = require('os')

let mark=0
let block=null
let lasttag=null

async function one(author, r)
{
	// for now we output everything, but would be reasonable to resume from
	// a provided block or time.
	if (r.alias[r.alias.length-1] === '/') {
		console.log(`progress <ignoring entry for empty path component ${r.alias}>`)
		return
	}
	if (r.block.h !== block && block !== null) {
		console.log(`progress <block-${block}`)
		console.log(`reset refs/tags/block-${block}`)
		console.log(`from :${mark}`)
		console.log(`checkpoint`)
	}
	block = r.block.h
	console.log(`progress ${r.block.t} ${r.transaction} ${r.alias} ${r.type} ${r.pointer}`)
	if (r.type === 'c') {
		try {
			r.pointer = await bitdb.bitdb(bitdb.c(r.pointer))
		} catch(e) {
			if (e.code !== 'NoResults') { throw e }
		}
		r.type = 'tx'
	}
	let stat, len, app
	let fn = `${os.tmpdir()}/${r.pointer}` 
	if (!r.type || r.type.toLowerCase() === 'b' || r.type.toLowerCase() == 'tx') {
		if (r.pointer == null) { len = 0; stat = {} }
		else try {
			app = bitdb.parseapp(await bitdb.bitdb(bitdb.app(r.pointer)))
			if (app === 'B') {
				stat = await bitdb.bitdb(bitdb.b(r.pointer))
				//process.stderr.write(JSON.stringify(stat))
				stat.data = Buffer.from(stat.data, 'base64')
				len = stat.data.length
				fs.writeFileSync(fn, stat.data)
			} else if (app === 'BCAT') {
				stat = await bitdb.bitdb(bitdb.bcat(r.pointer))
				len = 0
				let fd = fs.openSync(fn, 'w')
				await download.bcatstream(r.pointer, {write: data => {
					data = Buffer.from(data, 'base64')
					fs.writeSync(fd, data)
					len += data.length
				}})
				fs.closeSync(fd)
			}
		} catch(e) {
			if (e.code === 'NoResults') {
				len = 0
				console.log('progress <content not found on blockchain>')
				stat = {'message': 'file content not found on blockchain'}
			} else {
				throw e
			}
		}
	} else if (r.type.toLowerCase() === 'txt') {
		stat = {}
		len = r.pointer.length
		fs.writeFileSync(fn, r.pointer)
	} else {
		console.log('progress <unhandled type ' + r.type + '>')
		stat = {'message': 'unhandled type ' + r.type}
	}
	++ mark
	console.log('commit refs/heads/master')
	console.log(`mark :${mark}`);
	console.log(`original-oid ${r.transaction}`)
	if (stat.sender) {
		console.log(`author <${stat.sender}> ${stat.block.t} +0000`)
	}
	console.log(`committer <${author}> ${r.block.t} +0000`)
	let commitmsg = `${r.alias} ${r.transaction}\ntype=${r.type} ${app}://${r.pointer}\ncommit block=${r.block.h} height=${r.block.i}\n`
	if (stat.filename) { commitmsg += `filename=${stat.filename} mime=${stat.mime} encoding=${stat.encoding}\nfile block=${stat.block.h} height=${stat.block.i}\n` }
	if (stat.message) { commitmsg += stat.message = '\n' }
	console.log(`data ${commitmsg.length}`)
	console.log(commitmsg)
	if (mark>1) {
		console.log(`from ${lasttag}`)
	}
	if (len) {
		console.log(`M 644 inline ${r.alias}`)
		console.log(`data ${len}`)
		fd = fs.openSync(fn, 'r')
		buf = Buffer.alloc(64000)
		while(true) {
			let count = fs.readSync(fd, buf, 0, buf.length)
			process.stdout.write(buf.slice(0, count))
			if (count < buf.length) break;
		}
		fs.closeSync(fd)
		fs.unlinkSync(fn)
	} else {
		console.log(`D ${r.alias}`)
	}
	console.log('')
	console.log(`reset refs/tags/tx-${r.transaction}`)
	console.log(`from :${mark}`)
	lasttag=`refs/tags/tx-${r.transaction}`
}

async function go(addr)
{
	let limit = 100
	let skip = 0
	while (true) {
		let res = await bitdb.bitdb(bitdb.d(addr, limit, skip, undefined, false))
		for (let r of res) {
			await one(addr, r)
		}
		if (res.length < limit) break
		skip += res.length
	}
	console.log('done')
}

go(argv._[0])
